<?php

namespace AppBundle\Repository;

/**
 * OfferRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OfferRepository extends \Doctrine\ORM\EntityRepository
{

    public function getNotificationOffers($notification)
    {
        $query = $this->createQueryBuilder('o');
        $query->andWhere('o.archived = 0 and (o.startDate > :date OR (o.creationDate > :date AND o.slot is not null))')
            ->setParameter('date', $notification->getDate());

        if($notification->getTypeNotification() == 'proposer'){
            $query->andWhere('o.proposer = :proposer')
            ->setParameter('proposer', $notification->getElementId());
        }elseif ($notification->getTypeNotification() == 'tag'){
            $query->andWhere(':tag MEMBER OF o.tag')
            ->setParameter('tag', $notification->getElementId());
        }

        $offers = $query->getQuery()->getResult();

        return $offers;
    }

    public function getOfferTags($id)
    {
        $query = $this->createQueryBuilder('o')->select('t.name')->distinct();
        $query->innerJoin('o.tag', 't')->andWhere('o.archived  = false and o.proposer = :proposer')
            ->setParameter('proposer', $id)
            ->orderBy('t.name', 'asc');

        $tags = $query->getQuery()->getResult();

        return $tags;
    }

    public function getActiveOffers()
    {
        $query = $this->createQueryBuilder('o');
        $query->andWhere('o.archived = 0 and (o.slot is not null or (o.startDate <= CURRENT_TIMESTAMP() and o.endDate >= CURRENT_TIMESTAMP()))');

        $offers = $query->getQuery()->getResult();

        return $offers;
    }

    public function countOffersInSlot($proposer)
    {
        $query = $this->createQueryBuilder('o');
        $query->andWhere('o.proposer = :proposer and o.archived = 0 and o.slot is not null')
            ->setParameter('proposer', $proposer);

        $offers = $query->getQuery()->getResult();

        return count($offers);
    }

    public function countActiveOffer($proposer)
    {
        $query = $this->createQueryBuilder('o');
        $query->andWhere('o.proposer = :proposer and o.archived = 0 and o.validated = 1')
            ->setParameter('proposer', $proposer);

        $offers = $query->getQuery()->getResult();

        return count($offers);
    }

    public function countTotalActiveOffer()
    {
        $query = $this->createQueryBuilder('o');
        $query->andWhere('o.archived = 0 and o.validated = 1');

        $offers = $query->getQuery()->getResult();

        return count($offers);
    }

    public function countTotalNotValidatedActiveOffer()
    {
        $query = $this->createQueryBuilder('o');
        $query->andWhere('o.archived = 0 and o.validated is null and o.validated = 1');

        $offers = $query->getQuery()->getResult();

        return count($offers);
    }

    public function findByLocation($location)
    {
        $query = $this->createQueryBuilder('o');
        $query->andWhere('o.archived = 0 and o.validated = 1 and o.location LIKE :location');
        $query->setParameter('location', '%'.$location.'%');

        $offers = $query->getQuery()->getResult();

        return $offers;
    }
}
